---
- name: Gater information about VPC
  ec2_vpc_net_info:
    filters:
      tag:Name: "{{ vpc_name }}"
  register: __vpc_info_1
  ignore_errors: true

- set_fact:
    vpc_id_1: "{{ __vpc_info_1.vpcs.0.vpc_id }}"

- name: Gater information about EC2 instances
  ec2_instance_info:
    filters:
      vpc-id: "{{ vpc_id_1 }}"
  register: __ec2_instances_info
  ignore_errors: true

- name: Delete EC2 instances
  ec2_instance:
    instance_ids:
      - "{{ item.instance_id }}"
    wait: true
    state: terminated
  ignore_errors: true
  loop: '{{ __ec2_instances_info.instances }}'

- name: Retrieve Security Groups based VPC 1
  ec2_group_info:
    filters:
      vpc-id: '{{ vpc_id_1 }}'
  register: __security_groups
  ignore_errors: true

- name: Delete Security Groups
  ec2_group:
    name: '{{ item.group_name }}'
    group_id: '{{ item.group_id }}'
    description: '{{ item.description }}'
    rules: []
    rules_egress: []
    state: absent
  loop: '{{ __security_groups.security_groups }}'
  ignore_errors: true

- name: Gater information about VPC route tables
  ec2_vpc_route_table_info:
    filters:
      vpc-id: "{{ vpc_id_1 }}"
  register: __route_table_info
  ignore_errors: true

- name: Delete VPC Route Tables
  ec2_vpc_route_table:
    route_table_id: "{{ item }}"
    vpc_id: "{{ vpc_id_1 }}"
    lookup: id
    state: absent
  with_items: "{{ __route_table_info.route_tables | map(attribute='id') | list }}"
  ignore_errors: true

- name: Delete Internet Gateway
  ec2_vpc_igw:
    vpc_id: "{{ vpc_id_1 }}"
    state: absent
  ignore_errors: true

- name: Gather information about NAT gateway
  ec2_vpc_nat_gateway_info:
    filters:
      subnet-id: "{{ __subnet_private_public.results[0].subnet.id }}"
      state: ['available']
  register: __nat_gateway
  ignore_errors: true

- name: Delete NAT Gateway
  ec2_vpc_nat_gateway:
    nat_gateway_id: "{{ __nat_gateway.result.0.nat_gateway_id }}"
    state: absent
  ignore_errors: true

- name: Delete subnets
  ec2_vpc_subnet:
    cidr: "{{ vpc_1_subnet_cidr_1 }}"
    state: absent
    vpc_id: "{{ vpc_id_1 }}"
  ignore_errors: true

- name: Delete subnets
  ec2_vpc_subnet:
    cidr: "{{ vpc_1_subnet_cidr_2 }}"
    state: absent
    vpc_id: "{{ vpc_id_1 }}"
  ignore_errors: true

- name: Ensure EIP is actually released
  ec2_eip:
    state: absent
    device_id: '{{ item.nat_gateway_addresses[0].network_interface_id }}'
    in_vpc: true
  with_items: '{{ __nat_gateway.result }}'
  ignore_errors: true

- name: Delete VPC 1
  ec2_vpc_net:
    name: '{{ vpc_name }}'
    cidr_block: '{{ vpc_1_cidr }}'
    state: absent
  ignore_errors: true