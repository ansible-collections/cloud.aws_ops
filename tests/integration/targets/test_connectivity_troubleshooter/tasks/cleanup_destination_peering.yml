---
- name: Gater information about VPC 1
  ec2_vpc_net_info:
    filters:
      tag:Name: "{{ vpc_name }}-1"
  register: __vpc_info_1
  ignore_errors: true

- name: Gater information about VPC 2
  ec2_vpc_net_info:
    filters:
      tag:Name: "{{ vpc_name }}-2"
  register: __vpc_info_2
  ignore_errors: true

- set_fact:
    vpc_id_1: "{{ __vpc_info_1.vpcs.0.vpc_id }}"
    vpc_id_2: "{{ __vpc_info_2.vpcs.0.vpc_id }}"

- name: Find all VPC Peering connections
  ec2_vpc_peering_info:
    filters:
      accepter-vpc-info.vpc-id: '{{ item }}'
  register: __vpc_peering_info
  loop:
  - '{{ vpc_id_1 }}'
  - '{{ vpc_id_2 }}'
  ignore_errors: true

- set_fact:
    vpc_peering_connection_ids: '{{ _vpc_peering_connections | map(attribute="vpc_peering_connection_id") | list }}'
  vars:
    _vpc_peering_connections: '{{ __vpc_peering_info.results | map(attribute="vpc_peering_connections") | flatten }}'

- name: Delete remaining Peering connections
  ec2_vpc_peer:
    peering_id: "{{ item }}"
    state: absent
  ignore_errors: true
  loop: '{{ vpc_peering_connection_ids }}'

- name: Gater information about EC2 instances
  ec2_instance_info:
    filters:
      vpc-id: "{{ vpc_id_1 }}"
  register: __ec2_instances_info
  ignore_errors: true

- name: Delete EC2 instances
  ec2_instance:
    instance_ids:
      - "{{ __ec2_instances_info.instances.0.instance_id }}"
    wait: true
    state: terminated
  ignore_errors: true

- name: Retrieve Security Groups based VPC 1
  ec2_group_info:
    filters:
      vpc-id: '{{ vpc_id_1 }}'
  register: __security_groups
  ignore_errors: true

- name: Delete Security Groups
  ec2_group:
    name: '{{ item.group_name }}'
    group_id: '{{ item.group_id }}'
    description: '{{ item.description }}'
    rules: []
    rules_egress: []
  loop: '{{ __security_groups.security_groups }}'
  ignore_errors: true

- name: Gater information about VPC route tables
  ec2_vpc_route_table_info:
    filters:
      vpc-id: "{{ vpc_id_1 }}"
      association.main: false
  register: __route_table_info
  ignore_errors: true

- name: Delete VPC Route Tables
  ec2_vpc_route_table:
    route_table_id: "{{ item }}"
    vpc_id: "{{ vpc_id_1 }}"
    lookup: id
    state: absent
  with_items: "{{ __route_table_info.route_tables | map(attribute='id') | list }}"
  ignore_errors: true

- name: Delete subnet
  ec2_vpc_subnet:
    cidr: "{{ vpc_1_subnet_cidr_1 }}"
    state: absent
    vpc_id: "{{ vpc_id_1 }}"
  ignore_errors: true

- name: Delete VPC 1
  ec2_vpc_net:
    name: '{{ vpc_name }}-1'
    cidr_block: '{{ vpc_1_cidr }}'
    state: absent
  ignore_errors: true

- name: Gater information about VPC 2
  ec2_vpc_net_info:
    filters:
      tag:Name: "{{ vpc_name }}-2"
  register: __vpc_info_2
  ignore_errors: true

- set_fact:
    vpc_id_2: "{{ __vpc_info_2.vpcs.0.vpc_id }}"

- name: Gater information about EC2 instances
  ec2_instance_info:
    filters:
      vpc-id: "{{ vpc_id_2 }}"
  register: __ec2_instances_info
  ignore_errors: true

- name: Delete EC2 instance
  ec2_instance:
    instance_ids:
      - "{{ __ec2_instances_info.instances.0.instance_id }}"
    wait: true
    state: terminated
  ignore_errors: true

- name: Retrieve Security Groups based VPC 2
  ec2_group_info:
    filters:
      vpc-id: '{{ vpc_id_2 }}'
  register: __security_groups
  ignore_errors: true

- name: Delete Security Groups
  ec2_group:
    name: '{{ item.group_name }}'
    group_id: '{{ item.group_id }}'
    description: '{{ item.description }}'
    rules: []
    rules_egress: []
    state: absent
  loop: '{{ __security_groups.security_groups }}'
  ignore_errors: true

- name: Gater information about VPC route tables
  ec2_vpc_route_table_info:
    filters:
      vpc-id: "{{ vpc_id_2 }}"
      association.main: false
  register: __route_table_info
  ignore_errors: true

- name: Delete VPC Route Tables
  ec2_vpc_route_table:
    route_table_id: "{{ item }}"
    vpc_id: "{{ vpc_id_2 }}"
    lookup: id
    state: absent
  with_items: "{{ __route_table_info.route_tables | map(attribute='id') | list }}"
  ignore_errors: true

- name: Delete Internet Gateway
  ec2_vpc_igw:
    vpc_id: '{{ vpc_id_2 }}'
    state: absent
  ignore_errors: true

- name: Delete subnet
  ec2_vpc_subnet:
    cidr: "{{ vpc_2_subnet_cidr_1 }}"
    state: absent
    vpc_id: "{{ vpc_id_2 }}"
  ignore_errors: true

- name: Delete VPC 2
  ec2_vpc_net:
    name: '{{ vpc_name }}-2'
    cidr_block: '{{ vpc_2_cidr }}'
    state: absent
  ignore_errors: true