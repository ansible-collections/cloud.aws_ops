---
- name: Integration tests for ec2_networking_resources role
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"

  block:
    - name: Create networking infrastructure
      ansible.builtin.include_role:
        name: cloud.aws_ops.ec2_networking_resources
      vars:
        ec2_networking_resources_vpc_name: "{{ vpc_name }}"
        ec2_networking_resources_vpc_cidr_block: "{{ vpc_cidr_block }}"
        ec2_networking_resources_subnet_cidr_block: "{{ subnet_cidr_block }}"
        ec2_networking_resources_sg_internal_name: "{{ sg_name }}"
        ec2_networking_resources_sg_internal_description: Test security group

    - name: Get the created VPC
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ vpc_name }}"
          cidr: "{{ vpc_cidr_block }}"
      register: _vpc

    - name: Assert the VPC exists
      ansible.builtin.assert:
        that:
          - _vpc.vpcs | length == 1
          - _vpc.vpcs[0].cidr_block == vpc_cidr_block

    - name: Get the created subnet
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{ _vpc.vpcs[0].id }}"
          cidr-block: "{{ subnet_cidr_block }}"
      register: _subnet

    - name: Assert subnet has been created
      ansible.builtin.assert:
        that:
          - _subnet.subnets | length == 1
          - _subnet.subnets[0].cidr_block == subnet_cidr_block

    - name: Get security group
      amazon.aws.ec2_security_group_info:
        filters:
          group-name: "{{ sg_name }}"
      register: _security_group

    - name: Assert default security group has been created
      ansible.builtin.assert:
        that:
          - _security_group.security_groups | length == 1
          - _sg_rule.from_port == 22
          - _sg_rule.to_port == 22
          - _sg_rule.ip_protocol == "tcp"
          - _sg_rule.ip_ranges[0].cidr_ip == vpc_cidr_block
      vars:
        _sg_rule: "{{ _security_group.security_groups[0].ip_permissions[0] }}"

  always:
    - name: Delete the security group
      amazon.aws.ec2_security_group:
        state: absent
        name: "{{ sg_name }}"
      ignore_errors: true

    - name: Get the VPC
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ vpc_name }}"
          cidr: "{{ vpc_cidr_block }}"
      register: vpc
      ignore_errors: true

    - name: Delete the VPC subnet
      amazon.aws.ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ vpc.vpcs[0].id }}"
        cidr: "{{ subnet_cidr_block }}"
      ignore_errors: true

    - name: Get the route tables
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          vpc-id: "{{ vpc.vpcs[0].id }}"
      register: routes
      ignore_errors: true

    - name: Delete the route tables
      amazon.aws.ec2_vpc_route_table:
        state: absent
        route_table_id: "{{ item.route_table_id }}"
        lookup: id
      loop: "{{ routes.route_tables }}"
      ignore_errors: true

    - name: Delete the VPC
      amazon.aws.ec2_vpc_net:
        state: absent
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr_block }}"
      ignore_errors: true
