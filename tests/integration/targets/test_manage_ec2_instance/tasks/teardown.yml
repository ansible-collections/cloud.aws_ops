---
- name: Teardown
  block:
    - name: Get instance info with provided name
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ test_ec2_instance_name }}"
          instance-state-name: ["pending", "running", "stopping", "stopped"]
      register: ec2_info_result

    - name: Disassociate and release EIP if present
      when: ec2_info_result.instances | length > 0
      amazon.aws.ec2_eip:
        device_id: "{{ ec2_info_result.instances[0].instance_id }}"
        state: absent
        release_on_disassociation: true

    - name: Delete ec2 instance
      amazon.aws.ec2_instance:
        state: absent
        filters:
          "tag:Name": "{{ test_ec2_instance_name }}"
      ignore_errors: true

    - name: Delete keypair
      amazon.aws.ec2_key:
        name: "{{ test_ec2_key_name }}"
        state: absent
      ignore_errors: true

    - name: Delete security group
      amazon.aws.ec2_security_group:
        name: "{{ test_security_group_name }}"
        state: absent
      ignore_errors: true

    - name: Delete subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}"
        cidr: "{{ test_subnet_cidr }}"
        state: absent
      ignore_errors: true

    - name: Delete internet gateway
      amazon.aws.ec2_vpc_igw:
        internet_gateway_id: "{{ gateway_id }}"
        vpc_id: "{{ vpc_id }}"
        state: absent
      ignore_errors: true

    - name: Get list of route tables in VPC
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          vpc-id: "{{ vpc_id }}"
      register: route_tables

    - name: Delete route tables associated with VPC
      amazon.aws.ec2_vpc_route_table:
        lookup: id
        route_table_id: "{{ item.route_table_id }}"
        state: absent
      loop: "{{ route_tables.route_tables }}"
      ignore_errors: true

    - name: Delete VPC
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ test_vpc_cidr }}"
        vpc_id: "{{ vpc_id }}"
        state: absent
      register: delete_result
      ignore_errors: true
