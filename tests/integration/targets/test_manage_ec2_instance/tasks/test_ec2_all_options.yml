---
- name: Run tests
  block:
    - name: Create EC2 instance with all options
      ansible.builtin.include_role:
        name: cloud.aws_ops.manage_ec2_instance
      vars:
        manage_ec2_instance_operation: create
        manage_ec2_instance_instance_name: "{{ test_ec2_instance_name }}"
        manage_ec2_instance_instance_type: "{{ test_ec2_instance_type }}"
        manage_ec2_instance_ami_id: "{{ image_id }}"
        manage_ec2_instance_key_name: "{{ test_ec2_key_name }}"
        manage_ec2_instance_vpc_subnet_id: "{{ subnet_id }}"
        manage_ec2_instance_tags:
          Environment: Testing
        manage_ec2_instance_wait_for_state: true
        manage_ec2_instance_associate_security_groups:
          - "{{ test_security_group_name }}"
        manage_ec2_instance_associate_eip: true
        manage_ec2_instance_eip_tags:
          Environment: Testing

    - name: Get EC2 instance info
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ test_ec2_instance_name }}"
          instance-state-name: ["pending", "running"]
      register: _ec2_instance

    - name: Validate EC2 creation
      ansible.builtin.assert:
        that:
          - _ec2_instance.instances | length == 1
          - _ec2_instance.instances[0].instance_type == test_ec2_instance_type
          - _ec2_instance.instances[0].image_id == image_id
          - _ec2_instance.instances[0].key_name == test_ec2_key_name
          - _ec2_instance.instances[0].subnet_id == subnet_id
          - _ec2_instance.instances[0].tags.Environment == "Testing"
          - _ec2_instance.instances[0].state.name == "running"
          - _ec2_instance.instances[0].network_interfaces[0].groups[0].group_name == test_security_group_name
          - _ec2_instance.instances[0].network_interfaces[0].association.public_ip is defined

    - name: Delete created instance
      ansible.builtin.include_role:
        name: cloud.aws_ops.manage_ec2_instance
      vars:
        manage_ec2_instance_operation: delete
        manage_ec2_instance_instance_name: "{{ test_ec2_instance_name }}"
        manage_ec2_instance_key_name: "{{ test_ec2_key_name }}"

    - name: Get EC2 instance info
      amazon.aws.ec2_instance_info:
        instance_ids:
          - "{{ _ec2_instance.instances[0].instance_id }}"
      register: _deleted_ec2_instance

    - name: Validate EC2 termination
      ansible.builtin.assert:
        that:
          - _deleted_ec2_instance.instances | length == 1
          - _deleted_ec2_instance.instances[0].state.name == "terminated"

    - name: Get key info
      amazon.aws.ec2_key_info:
        names:
          - "{{ test_ec2_key_name }}"
      register: _deleted_key

    - name: Verify that key pair was deleted
      ansible.builtin.assert:
        that: _deleted_key.keypairs | length == 0

  # cleanup leftover resources created by role
  always:
    - name: Terminate EC2 instance
      amazon.aws.ec2_instance:
        state: absent
        filters:
          "tag:Name": "{{ test_ec2_instance_name }}"
        wait: true
      ignore_errors: true

    - name: Delete created key
      amazon.aws.ec2_key:
        name: "{{ test_ec2_key_name }}"
        state: absent
      ignore_errors: true
