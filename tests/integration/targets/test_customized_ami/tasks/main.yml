---
- vars:
    # test_resource_prefix: "{{ lookup('password', '/dev/null chars=ascii_letters,digits', length=10) }}"
    test_resource_prefix: ab-02

  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"

  block:
    - name: Create temporary file to store private key
      tempfile:
        suffix: id_rsa
      register: tmpfile

    - set_fact:
        keyfile_path: "{{ tmpfile.path }}"

    - set_fact:
        custom_ami_name: custom-ami-{{ test_resource_prefix }}

    # Create custom AMI
    - include_tasks: create.yml

    # Create EC2 instance using custom AMI
    - include_tasks: create_infra.yml
      vars:
        ec2_instance_name: ec2_initial

    # Test podman on running instance
    - name: Ensure Podman is installed into EC2 instance
      shell: podman pull docker.io/nginx
      delegate_to: ec2_initial

    # Update custom AMI
    - include_tasks: update.yml

    # Create another EC2 instance using updated custom AMI
    - include_tasks: create_infra.yml
      vars:
        ec2_instance_name: ec2_updated

    # Test podman on running instance
    - name: Ensure Podman is installed into EC2 instance
      shell: podman pull docker.io/nginx
      ignore_errors: true
      register: podman
      delegate_to: ec2_updated

    - name: Validate that Podman is not installed
      assert:
        that:
          - podman is failed

    - name: Start libvirt service on EC2 instance
      ansible.builtin.service:
        name: libvirtd
        state: started
      delegate_to: ec2_updated
      become: true

    # Delete custom AMI
    - include_tasks: delete.yml

    - name: Get custom AMI information
      amazon.aws.ec2_ami_info:
        filters:
          name: "{{ custom_ami_name }}"
      register: ami_info

    - name: Ensure Custom AMI was deleted
      assert:
        that:
          - ami_info.images | length == 0

  always:
    - include_tasks: delete_infra.yml

    - name: Delete temporary file
      file:
        path: "{{ keyfile_path }}"
        state: absent
      when: keyfile_path is defined
      ignore_errors: true
