---
- name: Get vpc information
  ec2_vpc_net_info:
    filters:
      tag:Name: "{{ vpc_name }}"
  register: vpc

- block:
    - set_fact:
        vpc_id: "{{ vpc.vpcs.0.vpc_id }}"

    - name: Get bastion instance info
      ec2_instance_info:
        filters:
          instance-type: "{{ bastion_host_type }}"
          key-name: "{{ sshkey_pair_name }}"
          vpc-id: "{{ vpc_id }}"
      register: proxy

    - name: Delete EC2 instances with dependant Resources
      block:
        - set_fact:
            host_prefix: "{{ proxy.instances.0.public_dns_name | split('.') | first }}"

        - name: Delete workers key pair
          ec2_key:
            name: "{{ host_prefix }}-key"
            state: absent

        - name: Delete load balancer
          elb_classic_lb:
            name: "{{ host_prefix }}-lb"
            wait: true
            state: absent

        - name: List workers
          ec2_instance_info:
            filters:
              tag:Name: "{{ host_prefix }}-workers"
              instance-state-name: running
          register: vms

        - name: Delete workers
          ec2_instance:
            instance_ids: "{{ vms.instances | map(attribute='instance_id') | list }}"
            wait: true
            state: terminated

        - name: Delete bastion host
          ec2_instance:
            instance_ids:
              - "{{ proxy.instances.0.instance_id }}"
            wait: true
            state: terminated

      when: proxy.instances | length == 1

    - name: Delete RDS instance
      rds_instance:
        state: absent
        db_instance_identifier: "{{ rds_identifier }}"
        skip_final_snapshot: true
        wait: true

    - name: Delete key pair to connect to the bastion VM
      ec2_key:
        name: '{{ sshkey_pair_name }}'
        state: absent

    - name: Delete RDS subnet group
      rds_subnet_group:
        name: '{{ rds_subnet_group_name }}'
        state: absent

    - name: List Security group from VPC
      ec2_group_info:
        filters:
          vpc-id: "{{ vpc_id }}"
          tag:prefix: "{{ resource_prefix }}"
      register: sg

    - name: Delete security groups
      ec2_group:
        state: absent
        group_id: "{{ item }}"
      with_items: "{{ sg.security_groups | map(attribute='group_id') | list }}"

    - name: List routes table from VPC
      ec2_vpc_route_table_info:
        filters:
          vpc-id: "{{ vpc_id }}"
      register: route_table

    - name: Delete VPC route table
      ec2_vpc_route_table:
        route_table_id: "{{ item }}"
        vpc_id: "{{ vpc_id }}"
        state: absent
      with_items: "{{ route_table.route_tables | map(attribute='id') | list }}"

    - name: Get NAT gateway
      ec2_vpc_nat_gateway_info:
        filters:
          vpc-id: "{{ vpc_id }}"
      register: nat_gw

    - name: Delete NAT gateway
      ec2_vpc_nat_gateway:
        nat_gateway_id: "{{ item }}"
        state: absent
        wait: true
      with_items: "{{ nat_gw.result | map(attribute='nat_gateway_id') | list }}"

    - name: Delete internet gateway
      ec2_vpc_igw:
        vpc_id: '{{ vpc_id }}'
        state: absent

    - name: Delete subnets
      ec2_vpc_subnet:
        cidr: "{{ item }}"
        state: absent
        vpc_id: "{{ vpc_id }}"
      with_items: "{{ subnet_cidr }}"

    # As ec2_vpc_route_table can't delete route table,
    # the vpc still has dependencies and cannot be deleted.
    # You need to do it delete it manually using either the console or the cli.
    - name: Delete VPC
      ec2_vpc_net:
        name: '{{ vpc_name }}'
        cidr_block: '{{ vpc_cidr }}'
        state: absent
      ignore_errors: true

  when: vpc.vpcs | length == 1
