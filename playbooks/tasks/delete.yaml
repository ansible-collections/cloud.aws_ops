---
- name: Delete resources playbook
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ region | default(aws_region) }}"

  block:
    - name: Get vpc information
      amazon.aws.ec2_vpc_net_info:
        filters:
          tag:Name: "{{ vpc_name }}"
      register: vpc

    - name: Deelete resources
      when: vpc.vpcs | length == 1
      block:
        - name: Set 'vpc_id' variable
          ansible.builtin.set_fact:
            vpc_id: "{{ vpc.vpcs.0.vpc_id }}"

        - name: Get bastion instance info
          amazon.aws.ec2_instance_info:
            filters:
              instance-type: "{{ bastion_host_type }}"
              key-name: "{{ sshkey_pair_name }}"
              vpc-id: "{{ vpc_id }}"
          register: bastion

        - name: Delete EC2 instances with dependant Resources
          when: bastion.instances | length == 1
          block:
            - name: Set 'instance_host_name' variable
              ansible.builtin.set_fact:
                instance_host_name: "{{ bastion.instances.0.public_dns_name | split('.') | first }}"

            - name: Delete workers key pair
              amazon.aws.ec2_key:
                name: "{{ instance_host_name }}-key"
                state: absent

            - name: Delete load balancer
              amazon.aws.elb_classic_lb:
                name: "{{ instance_host_name }}-lb"
                wait: true
                state: absent

            - name: List workers
              amazon.aws.ec2_instance_info:
                filters:
                  tag:Name: "{{ instance_host_name }}-workers"
                  instance-state-name: running
              register: running

            - name: Delete workers
              amazon.aws.ec2_instance:
                instance_ids: "{{ running.instances | map(attribute='instance_id') | list }}"
                wait: true
                state: terminated

            - name: Delete bastion host
              amazon.aws.ec2_instance:
                instance_ids:
                  - "{{ bastion.instances.0.instance_id }}"
                wait: true
                state: terminated

        - name: Delete RDS instance
          amazon.aws.rds_instance:
            state: absent
            db_instance_identifier: "{{ rds_identifier }}"
            skip_final_snapshot: true
            wait: true

        - name: Delete key pair to connect to the bastion VM
          amazon.aws.ec2_key:
            name: "{{ sshkey_pair_name }}"
            state: absent

        - name: Delete RDS subnet group
          amazon.aws.rds_subnet_group:
            name: "{{ rds_subnet_group_name }}"
            state: absent

        - name: List Security group from VPC
          amazon.aws.ec2_security_group_info:
            filters:
              vpc-id: "{{ vpc_id }}"
              tag:prefix: "{{ resource_prefix }}"
          register: secgroups

        - name: Delete security groups
          amazon.aws.ec2_security_group:
            state: absent
            group_id: "{{ item }}"
          with_items: "{{ secgroups.security_groups | map(attribute='group_id') | list }}"

        - name: List routes table from VPC
          amazon.aws.ec2_vpc_route_table_info:
            filters:
              vpc-id: "{{ vpc_id }}"
              association.main: false
          register: route_table

        - name: Delete VPC route table
          amazon.aws.ec2_vpc_route_table:
            route_table_id: "{{ item }}"
            vpc_id: "{{ vpc_id }}"
            lookup: id
            state: absent
          with_items: "{{ route_table.route_tables | map(attribute='id') | list }}"

        - name: Get NAT gateway
          amazon.aws.ec2_vpc_nat_gateway_info:
            filters:
              vpc-id: "{{ vpc_id }}"
          register: nat_gw

        - name: Delete NAT gateway
          amazon.aws.ec2_vpc_nat_gateway:
            nat_gateway_id: "{{ item }}"
            state: absent
            wait: true
          with_items: "{{ nat_gw.result | map(attribute='nat_gateway_id') | list }}"

        - name: Delete internet gateway
          amazon.aws.ec2_vpc_igw:
            vpc_id: "{{ vpc_id }}"
            state: absent

        - name: Delete subnets
          amazon.aws.ec2_vpc_subnet:
            cidr: "{{ item }}"
            state: absent
            vpc_id: "{{ vpc_id }}"
          with_items: "{{ subnet_cidr }}"

        # As ec2_vpc_route_table can't delete route table, the vpc still has dependencies and cannot be deleted.
        # You need to do it delete it manually using either the console or the cli.
        - name: Delete VPC
          amazon.aws.ec2_vpc_net:
            name: "{{ vpc_name }}"
            cidr_block: "{{ vpc_cidr }}"
            state: absent
          ignore_errors: true
