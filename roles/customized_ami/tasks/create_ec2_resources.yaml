---
- name: Create a VPC to work in
  amazon.aws.ec2_vpc_net:
    cidr_block: "{{ custom_ami_vpc_cidr }}"
    name: "{{ custom_ami_vpc_name }}"
    tags: "{{ custom_ami_resource_tags }}"
  register: customized_ami__vpc

- name: Create a public subnet
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ customized_ami__vpc.vpc.id }}"
    cidr: "{{ custom_ami_subnet_cidr }}"
    tags: "{{ custom_ami_resource_tags }}"
  register: customized_ami__subnet

- name: Create internet gateway attached to the VPC
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ customized_ami__vpc.vpc.id }}"
    tags: "{{ custom_ami_resource_tags }}"
    state: present
  register: customized_ami__internet_gateway

- name: Create Route table for internet gateway (public subnet)
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ customized_ami__vpc.vpc.id }}"
    subnets:
      - "{{ customized_ami__subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ customized_ami__internet_gateway.gateway_id }}"
    tags: "{{ custom_ami_resource_tags }}"
    state: present

- name: Create security group allowing SSH connection
  amazon.aws.ec2_security_group:
    name: "{{ custom_ami_security_group }}"
    vpc_id: "{{ customized_ami__vpc.vpc.id }}"
    description: "{{ custom_ami_security_group_desc }}"
    rules:
      - cidr_ip: 0.0.0.0/0
        proto: tcp
        from_port: 22
        to_port: 22
    rules_egress:
      - cidr_ip: 0.0.0.0/0
        proto: -1
    tags: "{{ custom_ami_resource_tags }}"
    state: present
  register: customized_ami__security_group

- name: Create key pair to connect to the VM
  amazon.aws.ec2_key:
    name: "{{ custom_ami_key_name }}"
    key_material: "{{ lookup('file', custom_ami_public_key_file) }}"
    tags: "{{ custom_ami_resource_tags }}"

- name: Create a virtual machine
  amazon.aws.ec2_instance:
    name: "{{ custom_ami_ec2_instance_name }}"
    instance_type: "{{ custom_ami_ec2_instance_type }}"
    image_id: "{{ customized_ami__source_ami_image_id }}"
    key_name: "{{ custom_ami_key_name }}"
    subnet_id: "{{ customized_ami__subnet.subnet.id }}"
    network:
      assign_public_ip: true
      groups:
        - "{{ customized_ami__security_group.group_id }}"
    security_groups:
      - "{{ customized_ami__security_group.group_id }}"
    wait: true
    tags: "{{ custom_ami_resource_tags }}"
    state: started
  register: customized_ami__ec2

- name: Set 'customized_ami__instance_id' variable
  ansible.builtin.set_fact:
    customized_ami__instance_id: "{{ customized_ami__ec2.instances.0.instance_id }}"

- name: Add host to inventory
  ansible.builtin.add_host:
    hostname: ec2
    ansible_ssh_user: "{{ source_ami_user_name }}"
    ansible_host: "{{ customized_ami__ec2.instances.0.public_ip_address }}"
    ansible_ssh_common_args: -o "UserKnownHostsFile=/dev/null" -o StrictHostKeyChecking=no -i {{ custom_ami_private_key_file }}
