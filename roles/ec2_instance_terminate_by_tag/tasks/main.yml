---

- block:

    - name: Verify that tag to terminate instances with was provided
      ansible.builtin.debug: msg="Please set 'tag_key_to_terminate_instances' to a tag based on which instances should be terminated..."
      when: tag_key_to_terminate_instances | length == 0

    - when: tag_key_to_terminate_instances | length != 0
      block:

        - name: prepare filters dict to filter running instances with specified tag
          ansible.builtin.set_fact:
            instance_filters: "{{ { 'instance-state-name': 'running' ,  'tag:' + tag_key_to_terminate_instances: tag_value_to_terminate_instances } }}"

        - name: Get instances to be terminated
          amazon.aws.ec2_instance_info:
            filters: "{{ instance_filters }}"
          register: tagged_instances

        - name: Create a list of instance ids to be terminated
          ansible.builtin.set_fact:
            instance_ids: "{{ tagged_instances.instances | map(attribute='instance_id') | list }}"

        - name: disable instance termination protection if terminate_termination_protected_instances is true
          amazon.aws.ec2_instance:
            instance_ids:
              - "{{ item }}"
            termination_protection: false
          with_items: "{{ instance_ids }}"
          when: terminate_termination_protected_instances == True

        - name: terminate instances
          amazon.aws.ec2_instance:
            instance_ids:
              - "{{ item }}"
            state: absent
          register: terminate_result
          with_items:
            - "{{ instance_ids }}"

        - name: Create list of terminated instances
          ansible.builtin.set_fact:
            terminated_instances: "{{ terminate_result.results| map(attribute='terminate_success') | list | flatten }}"
        - debug: msg="Terminated instances successfully -> {{ terminated_instances_info }}"
